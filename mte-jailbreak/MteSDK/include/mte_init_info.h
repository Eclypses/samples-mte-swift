/* Copyright (c) Eclypses, Inc. */
/*  */
/* All rights reserved. */
/*  */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS */
/* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

/* WARNING: This file is automatically generated. Do not edit. */

#ifndef mte_init_info_h
#define mte_init_info_h

#ifdef __cplusplus
extern "C"
{
#endif

/* Init info requests. */
typedef enum mte_init_info_
{
  /* ARM64: is the AES extension present? Return 0 if not or non-zero if */
  /*        it is. This is only requested if it wasn't able to be */
  /*        determined automatically. */
  mte_init_info_arm64_aes_paa,

  /* ARM64: is the SHA-1 extension present? Return 0 if not or non-zero */
  /*        if it is. This is only requested if it wasn't able to be */
  /*        determined automatically. */
  mte_init_info_arm64_sha1_paa,

  /* ARM64: is the SHA-256 extension present? Return 0 if not or non-zero */
  /*        if it is. This is only requested if it wasn't able to be */
  /*        determined automatically. */
  mte_init_info_arm64_sha256_paa,

  /* ARM64: is the SHA-512 extension present? Return 0 if not or non-zero */
  /*        if it is. This is only requested if it wasn't able to be */
  /*        determined automatically. */
  mte_init_info_arm64_sha512_paa,

  /* ARM64: is the CRC-32 extension present? Return 0 if not or non-zero */
  /*        if it is. This is only requested if it wasn't able to be */
  /*        determined automatically. */
  mte_init_info_arm64_crc32_paa
} mte_init_info;

#ifdef __cplusplus
}
#endif

#endif

