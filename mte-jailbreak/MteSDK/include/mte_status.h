/* Copyright (c) Eclypses, Inc. */
/*  */
/* All rights reserved. */
/*  */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS */
/* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

/* WARNING: This file is automatically generated. Do not edit. */

#ifndef mte_status_h
#define mte_status_h

#ifdef __cplusplus
extern "C"
{
#endif

/* Status codes. */
typedef enum mte_status_
{
  /* No error occurred. */
  mte_status_success,

  /* Invalid input. */
  mte_status_invalid_input,

  /* A normal DRBG error occurred. NIST SP 800-90A section 9. */
  mte_status_drbg_error,

  /* A catastrophic DRBG error occurred. NIST SP 800-90A section 9. */
  mte_status_drbg_catastrophic,

  /* The seedlife has been reached. NIST SP 800-90A section 9.3.1. */
  mte_status_drbg_seedlife_reached,

  /* A cipher algorithm self-test failed. */
  mte_status_cipher_test_failed,

  /* A hash algorithm self-test failed. */
  mte_status_hash_test_failed,

  /* Output is inhibited due to an error state or self-test. */
  mte_status_output_inhibited,

  /* Implementation error. */
  mte_status_impl_error,

  /* Unsupported operation. */
  mte_status_unsupported,

  /* License error. */
  mte_status_license_error,

  /* No such token exists. */
  mte_status_token_does_not_exist,

  /* Checksum mismatch. */
  mte_status_checksum_mismatch,

  /* Hash digest mismatch. */
  mte_status_digest_mismatch,

  /* The message was received too long before/after it was sent. */
  mte_status_time_before_exceeded,
  mte_status_time_after_exceeded,

  /* The sequence number is outside the window. */
  mte_status_seq_outside_window,

  /* The sequence number has already been seen in async mode. */
  mte_status_seq_async_replay,

  /* Attempting to sync up a sequencing variation resulted in a bad */
  /* message. The state has been rolled back to where it was before the */
  /* message arrived. */
  mte_status_seq_mismatch
} mte_status;

#ifdef __cplusplus
}
#endif

#endif

